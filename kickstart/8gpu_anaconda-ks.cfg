platform=x86, AMD64, or Intel EM64T
#version=RHEL8
# Reboot after installation
reboot
# Use text mode install
text

repo --name="HPCM" --baseurl=http://202.20.169.251/repo/opt/clmgr/repos/cm/Cluster-Manager-1.5-rhel83-x86_64
repo --name="AppStream" --baseurl=file:///run/install/sources/mount-0000-nfs-device/AppStream

%pre
#CMU_LOG_INFO_START
#FOR CMU usage only do not put anything between START and STOP
mkdir -p /tmp/cmulogmount
mount -t nfs -o nolock 202.20.169.251:/opt/clmgr/image/autoGPU/ /tmp/cmulogmount
mount -t nfs -o remount,rw 202.20.169.251:/opt/clmgr/image/autoGPU/ /tmp/cmulogmount
echo "PRE_START" >> /tmp/cmulogmount/agpu1301.log
umount /tmp/cmulogmount
#CMU_LOG_INFO_STOP
#CMU_LOG_INFO_START
#FOR CMU usage only do not put anything between START and STOP
mkdir -p /tmp/cmulogmount
mount -t nfs -o nolock 202.20.169.251:/opt/clmgr/image/autoGPU/ /tmp/cmulogmount
mount -t nfs -o remount,rw 202.20.169.251:/opt/clmgr/image/autoGPU/ /tmp/cmulogmount
echo "PRE_STOP" >> /tmp/cmulogmount/agpu1301.log
umount /tmp/cmulogmount
#CMU_LOG_INFO_STOP
%end

%post --interpreter=/bin/bash --logfile=/root/ks-post.log
#CMU_LOG_INFO_START
#FOR CMU usage only do not put anything between START and STOP
mkdir -p /tmp/cmulogmount
mount -t nfs -o nolock 202.20.169.251:/opt/clmgr/image/autoGPU/ /tmp/cmulogmount
mount -t nfs -o remount,rw 202.20.169.251:/opt/clmgr/image/autoGPU/ /tmp/cmulogmount
echo "POST_START" >> /tmp/cmulogmount/agpu1301.log
mkdir -p /etc/opt/sgi/
cp -f /tmp/cmulogmount/cminfo-agpu1301 /etc/opt/sgi/cminfo
umount /tmp/cmulogmount
#CMU_LOG_INFO_STOP
echo 202.20.169.251 hpcm1 admin >> /etc/hosts
echo 202.20.169.1 agpu1301 >> /etc/hosts
echo agpu1301 >> /etc/HOSTNAME
###since rh6
grep -v HOSTNAME /etc/sysconfig/network > /tmp/tempo_file_mine
echo "HOSTNAME=agpu1301" >> /tmp/tempo_file_mine
mv /etc/sysconfig/network /etc/sysconfig/network.orig
cp /tmp/tempo_file_mine /etc/sysconfig/network

########################################
## Global Environment
#########################################
KS_SERVER=admin
KS_SERVER_IP=202.20.169.251

IP=""
HOSTNAME=""

WORK_DIR=/install

CFG_DIR=${WORK_DIR}/post/post_config
PKG_DIR=${WORK_DIR}/post/post_packages
OFED_PDIR=${PKG_DIR}/ofed
GPU_PDIR=${PKG_DIR}/cuda

########################################
# To Mount for work directory
########################################
function init_work_dir() {
        mkdir -p ${WORK_DIR}
        # -o nolock is required in Kickstart %post section
        mount -t nfs -o nolock ${KS_SERVER_IP}:${WORK_DIR} ${WORK_DIR}
}

########################################
# Setup IB Address
########################################
function setup_ib() {

                if [ -d ${OFED_PDIR} ]; then
                        cd ${OFED_PDIR}
                        ./mlnxofedinstall --hpc --force --without-fw-update
                fi

                IB=ib0
                IB_IP=`cat ${CFG_DIR}/ibhosts|grep -w agpu1301-ib |awk '{print $2}'`

cat << EOF > /etc/sysconfig/network-scripts/ifcfg-ib0
DEVICE=${IB}
TYPE=Infiniband
NM_CONTROLLED=yes
BOOTPROTO=none
IPADDR=${IB_IP}
NETMASK=255.255.0.0
ONBOOT=yes
EOF
}

########################################
# Setup GPU Driver
########################################
function setup_gpu() {

                if [ -d ${GPU_PDIR} ]; then
                        cd ${GPU_PDIR}
                        ./NVIDIA-Linux-x86_64-460.73.01.run --no-opengl-files -s
			dnf install -y nvidia-fabricmanager-460.x86_64
			systemctl enable nvidia-fabricmanager.service
			systemctl enable NetworkManager.service
			systemctl start nvidia-fabricmanager.service
			systemctl start NetworkManager.service
                fi
}

########################################
# Setup YUM
########################################
function setup_yum() {
                rm -rf /etc/yum.repos.d/*

                # RHEL8 repository
		wget -P /etc/yum.repos.d http://202.20.187.241/rhel8.3_iso/rhel8.3_iso.repo
		wget -P /etc/yum.repos.d http://202.20.187.241/epelrepo_rhel8/epel/epel-rhel8.repo
		wget -P /etc/yum.repos.d http://202.20.187.241/MLNX_OFED/5.2-1.0.4.0-rhel8.3.repo
		wget -P /etc/yum.repos.d http://202.20.187.241/linux/centos/docker-ce.repo
		wget -P /etc/yum.repos.d http://202.20.187.241/cudarepo_rhel8/compute/cuda/repos/rhel8/x86_64/cuda-rhel8.repo
}

########################################
# Setup SSH & PIP
########################################
function setup_sshpip() {
		cp -au ${CFG_DIR}/.ssh /root/
		cp -au ${CFG_DIR}/.pip /root/
}

########################################
# Setup SAIT Configuration
########################################
function setup_sait() {
		dnf install -y htop
		dnf install -y iftop
		## sysstat
		systemctl enable sysstat
		## NVPEERMEM
	        wget -P ./ http://202.20.187.241/cudarepo_rhel8/nvidia_peer_memory-1.1-0.x86_64.rpm
        	dnf -y install ./nvidia_peer_memory-1.1-0.x86_64.rpm
        	systemctl start nv_peer_mem.service
        	systemctl enable nv_peer_mem.service
        	systemctl status nv_peer_mem.service
		## LDAP
		cp -au ${CFG_DIR}/ldap.conf /etc/openldap/ldap.conf
		cp -au ${CFG_DIR}/sssd.conf /etc/sssd/sssd.conf
		#\cp -avf ${CFG_DIR}/nsswitch.conf /etc/nsswitch.conf
		yes | cp -avf ${CFG_DIR}/nsswitch.conf /etc/nsswitch.conf
	        chmod 600 /etc/sssd/sssd.conf
        	chown root:root /etc/sssd/sssd.conf
        	openssl rehash /etc/openldap/certs
        	authselect select sssd with-mkhomedir --force
        	systemctl enable --now oddjobd.service
		systemctl start sssd.service
        	systemctl enable sssd.service
        	systemctl start oddjobd.service
        	systemctl enable oddjobd.service
		## DOCKER
		dnf -y erase runc
        	dnf -y install docker-ce-19.03.15 docker-ce-cli-19.03.15
	        #local docker group delet
	        sed -i 's/docker.*/docker:x:971:/g' /etc/group
		systemctl --now enable docker
		## NTP
		systemctl enable chronyd
		cp -au ${CFG_DIR}/chrony.conf /etc/chrony.conf
		systemctl restart chronyd.service
		## LSF
		dnf -y install libnsl
		cp -au ${CFG_DIR}/lsf.sh /etc/profile.d/lsf.sh
		cp -au ${CFG_DIR}/lsf.csh /etc/profile.d/lsf.csh
		## RUNLEVEL
		systemctl set-default multi-user.target
		## NVIDIA PERSISTENCE MODE
		systemctl start nvidia-persistenced.service
        	systemctl enable nvidia-persistenced.service
}


init_work_dir
setup_ib
setup_yum
setup_gpu
setup_sshpip
setup_sait

###rhel7 specific: set NIC pxe boot option at the top of UEFI boot order list
###based on the cmuserver.conf settings
if [ "no" == "yes" ] ; then
    curr_nw_boot=`efibootmgr | grep "BootCurrent:" | awk '{print $2}'`
    curr_boot_order=`efibootmgr | grep "BootOrder:" | awk '{print $2}'`
    curr_boot_order=`echo "${curr_boot_order}" | sed -e 's/'"${curr_nw_boot}"',*//g'`
    new_boot_order=`echo "${curr_nw_boot},${curr_boot_order}"  | sed -e 's/,$//g' ` 
    if [ ! -z "$new_boot_order" ] ; then
        efibootmgr -o ${new_boot_order}
    fi
fi

#CMU_LOG_INFO_START
#FOR CMU usage only do not put anything between START and STOP
mkdir -p /tmp/cmulogmount
mount -t nfs -o nolock 202.20.169.251:/opt/clmgr/image/autoGPU/ /tmp/cmulogmount
mount -t nfs -o remount,rw 202.20.169.251:/opt/clmgr/image/autoGPU/ /tmp/cmulogmount
echo "POST_STOP" >> /tmp/cmulogmount/agpu1301.log
umount /tmp/cmulogmount
#CMU_LOG_INFO_STOP
%end

%packages
@^graphical-server-environment
@container-management
@debugging
@development
@dotnet-core
@file-server
@ftp-server
@graphical-admin-tools
@guest-agents
@headless-management
@infiniband
@legacy-unix
@network-file-system-client
@network-server
@performance
@remote-desktop-clients
@remote-system-management
@rpm-development-tools
@scientific
@security-tools
@smb-server
@system-tools
@web-server
bind-utils
binutils
bzip2
cattr
cattr-tempo
chrony
clusterhealth-server
cm-cli
cm-pdsh
cm-pdsh-mod-genders
cm-pdsh-rcmd-exec
cm-pdsh-rcmd-ssh
cm_rest_lib
cmu_cn
collectl
cpp
crepo-libs
dstat
elfutils-libelf-devel
environment-modules
filebeat
fping
fuse-libs
ganglia-gmond
gcc
gcc-c++
gcc-gfortran
genders
glibc
glibc-common
glibc-devel
glibc-headers
gtk2
hpe-build-key
hwloc
ipmitool
kernel-headers
kernel-modules-extra
kexec-tools
kexec-tools
ksh
lapack
libganglia
libgenders
libgfortran
libmlx4
libquadmath
libquadmath-devel
libstdc++-devel
libusbx
libyaml
lsof
m4
make
memlog
net-snmp
net-snmp-agent-libs
net-snmp-libs
net-snmp-utils
net-tools
nfs-utils
numactl
numactl-devel
openssh-server
openssl-devel
oscar-base
oscar-base-OCA
pciutils
perl-XML-LibXML
perl-interpreter
pigz
pkgconf-pkg-config
psacct
python36
rsync
sgi-cluster
sgi-cm-agnostic
sgi-csn
sgi-devname
sgi-pysnmp
sgi-service-node
sgi-service-node-release
sgi-settings
sgi-support-tools
sgi-tarem
ssh-oscar
sysstat
systemimager-client
tar
tcl
tcsh
tempohb-client
tftp
tk
udpcast
util-linux
wget
yum-utils
yume
zlib-devel

%end

# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8

# Firewall configuration
firewall --disabled
# Network information
network  --bootproto=static --device=88:e9:a4:20:30:4e --gateway=202.20.169.254 --hostname=agpu1301 --ip=202.20.169.1 --netmask=255.255.255.0 --activate

# Use NFS installation media
nfs --server=202.20.169.251 --dir=/opt/clmgr/repos/distro/rhel8.3.0-x86_64

# SELinux configuration
selinux --disabled

# Do not configure the X Window System
skipx

ignoredisk --only-use=sda,nvme0n1,nvme1n1
# System bootloader configuration
bootloader --append="rd.driver.blacklist=nouveau nouveau.modeset=0 crashkernel=auto" --location=mbr --boot-drive=sda
# Clear the Master Boot Record
zerombr
# Partition clearing information
clearpart --all --initlabel
# Disk partitioning information
part / --fstype="ext4" --ondisk=sda --size=423045
part /boot/efi --fstype="efi" --ondisk=sda --size=1024 --fsoptions="defaults,uid=0,gid=0,umask=077,shortname=winnt"
part /boot --fstype="ext4" --ondisk=sda --size=1024
part swap --fstype="swap" --ondisk=sda --size=32768

# System timezone
timezone Asia/Seoul

# Root password
rootpw --iscrypted $6$2OAak6LrJoUr3Srf$ugbMlE0am3U0U6Q.5NySLM0pGfewXM6QMiRjxaAKrS/Ox4Yk.t6yapYodaQyWV90gYGSez5YnrCabSDWIQ8p4.

%addon com_redhat_kdump --enable --reserve-mb='auto'

%end
